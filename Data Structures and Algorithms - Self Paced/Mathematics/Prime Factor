Prime Factor

Naive Solution 

void primeFactors(int n)
{
	for(int i =2; i < n ; i++)
	{
		if(isPrime(i))
		{
			int x = i;
			while( n % i == 0 )
			{
				print(x)
				x = x * i;
			}
		}
	}
}

Time Complexity: O(n log n)

--------------------------------------------

Efficient Solution

1] Divisors always appear in pairs

30: (1,30) , (2,15) , ( 3, 10) , ( 5, 6)

2] A number n can be written as multiplication of power of prime factors

12 = 2^2 *3

450 = 2^1 * 3^2 * 5^2

--------------------------------------------

void printPrimeFactors(int n)
{
	if( n <= 1) return

	for( int i = 2; i*i < = n ; i++)
	{
		while( n % i == 0)
		{
			print(i);
			n = n/i;
		}
	} 

	if( n > 1)
		print(n);
}

--------------------------------------------

More Efficient Solution

void printPrimeFactors(int n)
{
	if( n <= 1) return;

	while( n%2 ==0 )
	{
		print(2);
		n = n/2;
	}

	while( n%3 ==0 )
	{
		print(3);
		n = n/3;
	}

	for(int i=5; i*i <=n; i= i+6)
	{
		while(n%i == 0)
		{
			print(i);
			n=n/i;
		}

		while( n % (i+2) == 0)
		{
			print(i+2)
			n=n/(i+2);
		}
	}

	if(n > 3)
		print(n);
}

Time Complexity: O( sqrt(n))